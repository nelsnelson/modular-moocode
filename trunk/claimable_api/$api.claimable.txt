@create $implementing_interface named claimable:claimable
"run the line above then search + replace all instances of APL_CLAIM_ID with the object number of the newly created object";
@prop API_CLAIM_ID."claimable" 0 rc
@prop API_CLAIM_ID."claim_start_msg" "%DN has begun claiming %it..." rc
@prop API_CLAIM_ID."claim_finish_msg" "%DN has taken control of %it in %il!" rc
@prop API_CLAIM_ID."claim_continue_omsgs" {} rc
;;API_CLAIM_ID.("claim_continue_omsgs") = {"%DN is trying to claim %it!"}
@prop API_CLAIM_ID."claimants" [] rc
@prop API_CLAIM_ID."last_claimed" 0 rc
@prop API_CLAIM_ID."claim_cooldown" 180 rc
@prop API_CLAIM_ID."claim_dc" 10 rc
@prop API_CLAIM_ID."abandon_start_omsg" "" rc
@prop API_CLAIM_ID."abandon_finish_omsg" "" rc
@prop API_CLAIM_ID."controller" #-1 rc

;;API_CLAIM_ID.("implementors") = {}
;;API_CLAIM_ID.("aliases") = {"claimable"}
;;API_CLAIM_ID.("object_size") = {0, 0}

@verb API_CLAIM_ID:"attempt_claim" this none this
@verb API_CLAIM_ID:"claim_attempt_duration" this none this
@verb API_CLAIM_ID:"claim_dc" this none this

"END OF $api.claimable - starting $api.claimable.implementation";

@create $impl named implementation of $api.claimable:implementation of $api.claimable
"run the line above then search + replace all instances of APL_IMPL_ID with the object number of the newly created object";
@prop API_IMPL_ID."claimable" 0 rc
@prop API_IMPL_ID."claim_start_msg" "%DN has begun claiming %it..." rc
@prop API_IMPL_ID."claimants" [] rc
@prop API_IMPL_ID."last_claimed" 0 rc
@prop API_IMPL_ID."claim_cooldown" 180 rc
@prop API_IMPL_ID."claim_dc" 10 rc
@prop API_IMPL_ID."abandon_start_omsg" "" rc
@prop API_IMPL_ID."abandon_finish_omsg" "" rc
@prop API_IMPL_ID."controller" #-1 rc
@prop API_IMPL_ID."claim_finish_msg" "[ %DN has claimed %it successfully! ]" rc
@prop API_IMPL_ID."claim_continue_omsgs" {} rc
;;API_IMPL_ID.("claim_continue_omsgs") = {"%DN is trying to claim %it!"}
;;API_IMPL_ID.("aliases") = {"implementation of $api.claimable"}
;;API_IMPL_ID.("object_size") = {0, 0}

@verb API_IMPL_ID:"attempt_claim" this none this
@program API_IMPL_ID:attempt_claim
{what, who} = args;
{started, prog} = {time(), 1};
if (who in keys(what.claimants))
  {started, prog} = what.claimants[who];
endif
gain = 0;
dc = what:claim_dc(who);
if ((roll = random(20)) >= dc)
  gain = (5 + roll) - dc;
  prog = min(100, prog + gain);
endif
what.claimants[who] = {started, prog};
if (gamevalid(what.controller))
  try
    what.controller:tell(tostr($ansi.orange, "Warning!", $ansi.reset, "  ", who:dnamec() + " is claiming your ", what:dname(), " - ", prog, "% progress."));
  except e (ANY)
    $rpg:report_error(e);
  endtry
endif
if (prog >= 100)
  if ((time() - what.last_claimed) < what.claim_cooldown)
    who:tell(("Someone recently claimed this and you must wait " + $time_utils:dhms_english(what.claim_cooldown - (time() - what.last_claimed))) + " to claim it again.");
    what.claimants = hashremove(what.claimants, who);
    return 0;
  endif
  who:tell(("You have claimed " + what:dname()) + "!");
  what:set_controller(who);
  what.last_claimed = time();
  what.claimants = hashremove(what.claimants, who);
endif
who:tell("Your claim: ", $meter_utils:graphical_bar(prog, 100, 20, gain, $ansi.brown, $ansi.brightgreen), $ansi.reset, " ", prog, "% complete");
return prog;
.

@verb API_IMPL_ID:"claim_attempt_duration" this none this
@program API_IMPL_ID:claim_attempt_duration
return tofloat(args[1].claim_dc) / 2.0;
.

@verb API_IMPL_ID:"claim_dc" this none this
@program API_IMPL_ID:claim_dc
{what, who} = args;
return what.claim_dc;
.
;;API_CLAIM_ID.("implementation") = API_IMPL_ID
@prop $api.claimable API_CLAIM_ID